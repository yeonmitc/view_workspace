*{
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}
html,body{
    height: 100%;
    width: 100%;
}
.item_wrap{
    display: flex;
    flex-wrap: wrap;
    /* width: 100%;
    height: 100%; */
}
/* 
aspect-ratio: 가로 / 세로 
가로 세로 값이 상대적으로 같이 값을 움지는 방법
 */
.item{
    width: calc( 25% - 5px);
    /* 가로를 기준으로 세로값이 상대적으로 작게 */
    aspect-ratio: 6 / 5;
    /* height: 50%; */
    overflow: hidden;
    /* 자식요소를 부모인 item에 고정하기 위해서 position: relative 를 부모박스에 줘야한다 */
    position: relative;
    border-radius: 10px;
    margin: 5px 0px 5px 5px;

    
}

/* 아이템들이 효과를 적용하려면 block 요소여야한다 */
.mainMenu ul {
    padding: 0;
    display: block;
  }
  
  .mainMenu ul li {
    list-style: none;
    display: block;
  }
  
  .mainMenu ul li a {
    display: block;
    padding: 10px;
    color: white;
    border-radius: 20px;
    transition: all 0.3s ease-in-out;
  }

/*
가상 선택자: 실제로 없는데 있게 꾸며준다
:after : item 클래스 바로 뒤에 하나 가상 css 꾸며주겠다
content="" --> 작동한다
*/

.item:after{
    /* 필수 */
    content: "";
    display: block;
    background-color: rgba(0, 0, 0, 0.2);
    width: 150px;
    height: 150px;
    position:absolute;
    top:0;
    left:0;
    /* z-index : 레이아웃이 곂칠때 레이아웃 표시 순서 정할수 있다 기본값 (1)
    숫자가 높을수록 우선순위가 높다 
    */
    /* 그림자박스가 레이아웃에서 두번째로 표시 */
    z-index: 2;
    opacity: 0;

}

.imgBox{
    width: 100%;
    height: 100%;
}
.imgBox img{
    width: 100%;
    height: 100%;
}
/* position => 위치를 고정 : layout 겹칠때  */
/* position 기본값 : static --> top left 속성 무시 */
/* position absoulute : 고정값 : 부모의 위치에서 고정  */
/* 부모가   position: relative; 의 박스의 시작점   */
/* position: relative;  없으면 box -> body 시점   */
.textBox{
    width: 100%;
    height: 100%;
    position:absolute;
    top: 0;
    left: 0;
    color: white;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    align-items: flex-start;
    padding: 10px;
    /* text 가 3개 레이아웃에서 가장 위에 표시 */
    z-index: 3;

}
.textBox_name {
    font-size: 22px;
    font-weight: 500;
    opacity: 0;
    transform: translateY(-10px);
  }
  
  .textBox_price {
    font-size: 16px;
    font-weight: 400;
    opacity: 0;
    transform: translateY(-10px);
  }

.item:hover .imgBox img{
    transform: scale(1.2);
    /* 이미지 흐림 */
    filter: blur(3px);
}
/* 가상 선택자를 연속으로 사용가능한데 순서대로 실행한다 
item 클래스를 마우스 오버할때 :after 값을 변경한다
*/
.item:hover :after{
    opacity: 1;
}
.item:hover .textBox_name{
    opacity: 1;
}

.item:hover .textBox_price{
    opacity: 1;
}
/* 모든 이미지 움직이는 속성값 transition 같이 적용  */
.item:after,
.item .imgBox img,
.item .textBox_name,
.item .textBox_price {
  transition: all 0.4s ease-in-out;
}

.item .textBox_price {
  transition: all 0.4s ease-in-out 0.15s;
}